{"version":3,"file":"compare.js","sourceRoot":"","sources":["../../src/lib/compare.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  dateTimeConfig,\n  dateTimeConfigLeapYear,\n} from './dateTimeConfig';\n\nconst EPOCH: DateObject = {\n  day: 1,\n  month: 1,\n  year: 1970,\n};\n\n/**\n * Compare the two date, and if the left date is earlier return the difference in days\n * @param leftDate\n * @param rightDate\n */\nfunction compare(leftDate: string, rightDate: string): CompareResult {\n  // Parse our arguments\n  const leftDateObject: DateObject = createDateObject(leftDate, 'leftDate');\n  const rightDateObject: DateObject = createDateObject(rightDate, 'rightDate');\n\n  // Validate our dates\n  try {\n    validateDate(leftDateObject);\n    validateDate(rightDateObject);\n  } catch (err) {\n    throw err;\n  }\n\n  // get the Day Number for each date\n  const leftDayNumber: number = dayNumber(\n    leftDateObject.day,\n    leftDateObject.month,\n    leftDateObject.year,\n  );\n  const rightDayNumber: number = dayNumber(\n    rightDateObject.day,\n    rightDateObject.month,\n    rightDateObject.year,\n  );\n\n  // Calcualte the difference is years, excluding the days\n  const differenceFromYears: number = findDifferenceFromYears(leftDateObject.year, rightDateObject.year);\n\n  // Get the difference between the dayNumbers\n  const differenceFromDayNumbers: number =\n    (Math.max(leftDayNumber, rightDayNumber) - Math.min(leftDayNumber, rightDayNumber));\n\n  // To check the earliest and latest dates, calculate an epoch from 0/0/0000\n  const leftEpoch: number = calculateEpochInDays(leftDateObject);\n  const rightEpoch: number = calculateEpochInDays(rightDateObject);\n\n  let earliest: DateObject | undefined = undefined;\n  let latest: DateObject | undefined = undefined;\n\n  // If the left date is the largest epoch it's the latest, else it's the earliest\n  if (Math.max(leftEpoch, rightEpoch) === leftEpoch) {\n    earliest = rightDateObject;\n    latest = leftDateObject;\n  } else {\n    earliest = leftDateObject;\n    latest = rightDateObject;\n  }\n\n  // Check to ensure earliest and latest are defined, something failed otherwise\n  if (typeof earliest === undefined || typeof latest === undefined) {\n    throw new Error('An error occured when parsing the dates');\n  }\n\n  return {\n    earliest: `${earliest.day} ${earliest.month} ${earliest.year}`,\n    latest: `${latest.day} ${latest.month} ${latest.year}`,\n    // We use min and max here to ensure we don't output a negative value\n    difference: Math.abs(differenceFromYears - differenceFromDayNumbers),\n  };\n}\n\n/**\n * From a given string, return a new date object\n * @param date string\n * @param type string used for error signalling\n */\nfunction createDateObject(date: string, type: string): DateObject {\n  const explodeDate: string[] = date.split(' ');\n\n  try {\n    const dateObject: DateObject = {\n      day: parseInt(explodeDate[0]),\n      month: parseInt(explodeDate[1]),\n      year: parseInt(explodeDate[2]),\n    };\n    return dateObject;\n  } catch (err) {\n    throw new TypeError(`Improperly formatted ${type}, expecting DD MM YYYY`);\n  }\n}\n\n/**\n * Validate the date object, to ensure it fits within the constraints of\n * what a date can be\n * @param date DateObject\n */\nfunction validateDate(date: DateObject): boolean {\n  // Validate the months\n  if (date.month < 0) {\n    throw new Error('Day is not a positive number.');\n  }\n  // We must validate the month before we can validate the days\n  if (date.month > 12) {\n    throw new Error('Month is greater than 12');\n  }\n\n  // Validate the days\n  if (date.day < 0) {\n    throw new Error('Day is not a positive number.');\n  }\n  const maxDays: number = dateTimeConfig[date.month - 1].days;\n\n  if (date.day >= maxDays) {\n    throw new Error(`Day is greater than the max allowed days for that month: ${maxDays}`);\n  }\n\n  // Validate the years\n  if (date.year < 1990) {\n    throw new Error('Year must be greater than 1990.');\n  }\n\n  return true;\n}\n\n\n/**\n * Calculate the day number.\n * @param days number\n * @param month number\n * @param year number\n */\nfunction dayNumber(day: number, month: number, year: number): number {\n  // calculate the day number for the year.\n  const leapYear: boolean = isLeapYear(year);\n  const monthCount: number = [...Array(month)] // count each day for every month, except the current one\n    .map((_: any, index: number) => index - 1) // turn the array into something useful\n    .reduce((accumulator: number, month: number) => {\n      // If leap year, use a differnt config which gives Feb 29 days.\n      if (leapYear) {\n        return accumulator + dateTimeConfigLeapYear[month].days;\n      }\n      return accumulator + dateTimeConfig[month].days;\n    });\n  return monthCount + day + 1; // plus 1 to include the current day\n}\n\n/**\n * Find the difference in days between two years\n * @param leftYear number\n * @param rightYear number\n */\nfunction findDifferenceFromYears(leftYear: number, rightYear: number): number {\n  // find the largest year\n  const years: number[] =\n    // Create an array of the size of the largest year\n    [...Array(Math.max(leftYear, rightYear))]\n      // fill the array with the years\n      .map((_: any, index: number) => index)\n      // slice it between the largest and smallest year.\n      .slice(Math.min(leftYear, rightYear), Math.max(leftYear, rightYear) + 1);\n\n  return years.reduce((accumulator: number, year: number) => {\n    if (isLeapYear(year)) {\n      return accumulator + 366;\n    }\n    return accumulator + 365;\n  }, 0); // start the accumulator at 0\n}\n\n/**\n * Given a date object calculate an epoch from the year 0/0/0000\n * Used to identify which date is newer\n * @param date DateObject\n */\nfunction calculateEpochInDays(date: DateObject): number {\n  // Create an array from the year, and reduce it down from the lenght of the year\n  const dayCountFromYears: any = [...Array(date.year)]\n    .map((_: any, index: number) => index)\n    .reduce((accumulator: number, year: number) => {\n      if (isLeapYear(year)) {\n        return accumulator + 366;\n      }\n      return accumulator + 365;\n    }, 0); // start the accumulator at 0\n\n  return (dayCountFromYears + dayNumber(date.day, date.month, date.year) + date.day);\n}\n\n/**\n * Check to see if this year matches the pattern that identifies it as a Leap Year.\n * @param year number\n */\nfunction isLeapYear(year: number): boolean {\n  return (\n    year % 4 === 0 // is this year divisble by 4?\n    && year % 100 !== 0 // and is this year not divisble by 100\n  ) || year % 400 === 0; // or is this year divisble by 400\n}\n\n\ninterface DateObject {\n  day: number;\n  month: number;\n  year: number;\n}\n\ninterface CompareResult {\n  earliest: string;\n  latest: string;\n  difference: number;\n}\n\nexport {\n  compare,\n  CompareResult,\n  isLeapYear,\n  dayNumber,\n  findDifferenceFromYears,\n};\n"]}