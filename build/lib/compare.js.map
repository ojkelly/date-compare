{"version":3,"file":"compare.js","sourceRoot":"","sources":["../../src/lib/compare.ts"],"names":[],"mappings":"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","sourcesContent":["import { dateTimeConfig } from './dateTimeConfig';\n\nconst EPOCH: DateObject = {\n  day: 1,\n  month: 1,\n  year: 1970,\n};\n\n/**\n * Compare the two date, and if the left date is earlier return the difference in days\n * @param leftDate\n * @param rightDate\n */\nfunction compare(leftDate: string, rightDate: string): {\n  earliest: string,\n  latest: string,\n  difference: number,\n} {\n  // Parse our arguments\n  const leftDateObject: DateObject = explodeDate(leftDate, 'leftDate');\n  const rightDateObject: DateObject = explodeDate(rightDate, 'rightDate');\n\n  // Validate our dates\n  try {\n    validateDate(leftDateObject);\n    validateDate(rightDateObject);\n  } catch (err) {\n    throw err;\n  }\n\n  const leftEpoch: number = calculateEpochInDays(leftDateObject);\n  const rightEpoch: number = calculateEpochInDays(rightDateObject);\n\n  let earliest: DateObject | undefined = undefined;\n  let latest: DateObject | undefined = undefined;\n  if (Math.max(leftEpoch, rightEpoch) === leftEpoch) {\n    earliest = rightDateObject;\n    latest = leftDateObject;\n  } else {\n    earliest = leftDateObject;\n    latest = rightDateObject;\n  }\n\n  if (typeof earliest === undefined || typeof latest === undefined) {\n    throw new Error('An error occured when parsing the dates');\n  }\n\n  return {\n    earliest: `${earliest.day} ${earliest.month} ${earliest.year}`,\n    latest: `${latest.day} ${latest.month} ${latest.year}`,\n    // We use min and max here to ensure we don't output a negative value\n    difference: Math.max(leftEpoch, rightEpoch) - Math.min(leftEpoch, rightEpoch),\n  };\n}\n\n\nfunction explodeDate(date: string, type: string): DateObject {\n  const explodeDate: string[] = date.split(' ');\n\n  try {\n    const dateObject: DateObject = {\n      day: parseInt(explodeDate[0]),\n      month: parseInt(explodeDate[1]),\n      year: parseInt(explodeDate[2]),\n    };\n    console.log(dateObject);\n    return dateObject;\n  } catch (err) {\n    throw new TypeError(`Improperly formatted ${type}, expecting DD MM YYYY`);\n  }\n}\n\nfunction validateDate(date: DateObject): boolean {\n  // Validate the months\n  if (date.month < 0) {\n    throw new Error('Day is not a positive number.');\n  }\n  // We must validate the month before we can validate the days\n  if (date.month > 12) {\n    throw new Error('Month is greater than 12');\n  }\n\n  // Validate the days\n  if (date.day < 0) {\n    throw new Error('Day is not a positive number.');\n  }\n  const maxDays: number = dateTimeConfig[date.month - 1].days;\n\n  if (date.day >= maxDays) {\n    throw new Error(`Day is greater than the max allowed days for that month: ${maxDays}`);\n  }\n\n  // Validate the years\n  if (date.year < 1990) {\n    throw new Error('Year must be greater than 1990.');\n  }\n\n  return true;\n}\n\nfunction calculateEpochInDays(date: DateObject): number {\n  console.log('arr', [...Array(date.month - 1)].map((_, index: number) => index + 1));\n  // calculate the day number for the year.\n  const dayNumber: number =\n    [...Array(date.month - 1)] // count each day for every month, except the current one\n      .map((_, index: number) => index + 1) // turn the array into something usefule\n      .reduce((acculumaltor: number, month: number) => {\n        return acculumaltor + dateTimeConfig[month - 1].days;\n      });\n\n  console.log('dn', dayNumber);\n  console.log('epoch', ((date.year * 365) + dayNumber + date.day));\n  return ((date.year * 365) + dayNumber + date.day);\n}\n\n\ninterface DateObject {\n  day: number;\n  month: number;\n  year: number;\n}\n\nexport {\n  compare,\n};\n"]}