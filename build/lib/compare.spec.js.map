{"version":3,"file":"compare.spec.js","sourceRoot":"","sources":["../../src/lib/compare.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  CompareResult,\n  compare,\n  dayNumber,\n  findDifferenceFromYears,\n  isLeapYear,\n} from './compare';\n\nimport { test } from 'ava';\n\n// We know the following array of years are agreed to be leap years\n// So we can test the entire set.\nconst leapYears: number[] = [\n  1804, 1808, 1812, 1816, 1820, 1824, 1828, 1832, 1836, 1840, 1844, 1848, 1852, 1856, 1860, 1864,\n  1868, 1872, 1876, 1880, 1884, 1888, 1892, 1896, 1904, 1908, 1912, 1916, 1920, 1924, 1928, 1932,\n  1936, 1940, 1944, 1948, 1952, 1956, 1960, 1964, 1968, 1972, 1976, 1980, 1984, 1988, 1992, 1996,\n  2000, 2004, 2008, 2012, 2016, 2020, 2024, 2028, 2032, 2036, 2040, 2044, 2048, 2052, 2056, 2060,\n  2064, 2068, 2072, 2076, 2080, 2084, 2088, 2092, 2096, 2104, 2108, 2112, 2116, 2120, 2124, 2128,\n  2132, 2136, 2140, 2144, 2148, 2152, 2156, 2160, 2164, 2168, 2172, 2176, 2180, 2184, 2188, 2192,\n  2196, 2204, 2208, 2212, 2216, 2220, 2224, 2228, 2232, 2236, 2240, 2244, 2248, 2252, 2256, 2260,\n  2264, 2268, 2272, 2276, 2280, 2284, 2288, 2292, 2296, 2304, 2308, 2312, 2316, 2320, 2324, 2328,\n  2332, 2336, 2340, 2344, 2348, 2352, 2356, 2360, 2364, 2368, 2372, 2376, 2380, 2384, 2388, 2392,\n  2396, 2400,\n];\n\n// ================[ API TESTS ]================ //\n\ntest('13 7 1990 and 19 4 2017', (t: any) => {\n  const result: CompareResult = compare('13 7 1990', '19 4 2017');\n  t.is(result.difference, 9777);\n  t.is(result.earliest, '13 7 1990');\n  t.is(result.latest, '19 4 2017');\n});\n\ntest('15 10 1998 and 27 3 2019', (t: any) => {\n  const result: CompareResult = compare('15 10 1998', '27 3 2019');\n  t.is(result.difference, 7468);\n  t.is(result.earliest, '15 10 1998');\n  t.is(result.latest, '27 3 2019');\n});\n\ntest('16 8 2007 and 7 12 2007', (t: any) => {\n  const result: CompareResult = compare('16 8 2007', '7 12 2007');\n  t.is(result.difference, 113);\n  t.is(result.earliest, '16 8 2007');\n  t.is(result.latest, '7 12 2007');\n});\n\ntest('27 3 2004 and 22 5 2004', (t: any) => {\n  const result: CompareResult = compare('27 3 2004', '22 5 2004');\n  t.is(result.difference, 56);\n  t.is(result.earliest, '27 3 2004');\n  t.is(result.latest, '22 5 2004');\n});\n\n\ntest('should be able to identify leap years', (t: any) => {\n  // Test our set of known leap years\n  leapYears.forEach((year: number) => {\n    t.true(isLeapYear(year));\n  });\n});\n\n// ================[ UNIT TESTS ]================ //\n\ntest('should be able to identify non leap years', (t: any) => {\n  // Here we create an array containing the numbers for the years from 1800 to 2400\n  // Then we remove the known leap years, and confirm our function can check they\n  // are all non-leap years\n\n  // create the array the size of our range\n  const years: number[] = [...Array(2400)]\n    // Fill it with valaues\n    .map((_: any, index: number) => index)\n    // slice out the years 1800 to 2400\n    .slice(1800, 2400)\n    // finally filter out the known leap years\n    .filter((year: number) => !leapYears.includes(year));\n\n  // Now check each year in the array, they should all return false\n  years.forEach((year: number) => {\n    t.false(isLeapYear(year));\n  });\n});\n\n\ntest('Should be able to identify the day number', (t: any) => {\n  interface DayNumberTestItem {\n    day: number;\n    month: number;\n    year: number;\n    dayNumber: number;\n  }\n  const testArray: DayNumberTestItem[] = [\n    {\n      day: 9,\n      month: 8,\n      year: 2016,\n      dayNumber: 222,\n    },\n    {\n      day: 24,\n      month: 1,\n      year: 2015,\n      dayNumber: 24,\n    },\n    {\n      day: 15,\n      month: 9,\n      year: 1998,\n      dayNumber: 258,\n    },\n    {\n      day: 31,\n      month: 12,\n      year: 2003,\n      dayNumber: 365,\n    },\n  ];\n\n  testArray.forEach((test: DayNumberTestItem) => {\n    t.is(dayNumber(test.day, test.month, test.year), test.dayNumber);\n  });\n});\n\ntest('should be able get the days difference between years', (t: any) => {\n  interface YearTestItem {\n    leftYear: number;\n    rightYear: number;\n    difference: number;\n  }\n  const testArray: YearTestItem[] = [\n    {\n      leftYear: 2000,\n      rightYear: 2010,\n      difference: 3653,\n    },\n    {\n      leftYear: 2001,\n      rightYear: 2003,\n      difference: 730,\n    },\n    {\n      leftYear: 2001,\n      rightYear: 2004,\n      difference: 1095,\n    },\n  ];\n\n  testArray.forEach((test: YearTestItem) => {\n    t.is(findDifferenceFromYears(test.leftYear, test.rightYear), test.difference);\n  });\n});\n"]}